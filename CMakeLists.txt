# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(rhield)

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching spdlog (v1.13.0)...")
FetchContent_Declare(spdlog SYSTEM
	GIT_REPOSITORY
		"https://github.com/gabime/spdlog"
	GIT_TAG
		v1.13.0
)
FetchContent_MakeAvailable(spdlog)

message(STATUS "Fetching zasm...")
FetchContent_Declare(zasm SYSTEM
	GIT_REPOSITORY
		"https://github.com/zyantific/zasm.git"
)
FetchContent_MakeAvailable(zasm)

# Subdirectory: vendor
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/vendor")
else()
	set(CMAKE_FOLDER vendor)
endif()
add_subdirectory(vendor)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: rhield
set(rhield_SOURCES
	"src/Main.cpp"
	"src/decoder/Decoder.cpp"
	"src/util/Util.cpp"
	"src/CommonIncludes.hpp"
	"src/analysis/Analysis.hpp"
	"src/analysis/Pass.hpp"
	"src/analysis/PassManager.hpp"
	"src/analysis/passes/CallPass.hpp"
	"src/analysis/passes/DebugCheckPass.hpp"
	"src/analysis/passes/JunkPass.hpp"
	"src/analysis/passes/LeaPass.hpp"
	"src/analysis/passes/MBAPass.hpp"
	"src/analysis/passes/NopPass.hpp"
	"src/analysis/passes/PopPass.hpp"
	"src/analysis/passes/PushPass.hpp"
	"src/analysis/passes/RetPass.hpp"
	"src/core/Instance.hpp"
	"src/decoder/Decoder.hpp"
	"src/util/FileParser.hpp"
	"src/util/MapParser.hpp"
	"src/util/Random.hpp"
	"src/util/Util.hpp"
	cmake.toml
)

add_executable(rhield)

target_sources(rhield PRIVATE ${rhield_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${rhield_SOURCES})

target_compile_features(rhield PRIVATE
	cxx_std_23
)

target_include_directories(rhield PRIVATE
	src
)

target_link_libraries(rhield PRIVATE
	spdlog
	zasm
	pepp
)

if(MSVC) # msvc
	target_link_options(rhield PRIVATE
		"/MAP"
	)
endif()

target_precompile_headers(rhield PRIVATE
	"src/CommonIncludes.hpp"
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT rhield)
endif()

# Target: demo
set(demo_SOURCES
	"demo/Demo.cpp"
	"demo/Xorstr.hpp"
	cmake.toml
)

add_executable(demo)

target_sources(demo PRIVATE ${demo_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${demo_SOURCES})

target_compile_features(demo PRIVATE
	cxx_std_20
)

if(MSVC) # msvc
	target_compile_options(demo PRIVATE
		"/O3"
	)
endif()

if(MSVC) # msvc
	target_link_options(demo PRIVATE
		"/MAP"
	)
endif()

set_target_properties(demo PROPERTIES
	MSVC_RUNTIME_LIBRARY
		"MultiThreaded$<$<CONFIG:Debug>:Debug>DLL"
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT demo)
endif()
